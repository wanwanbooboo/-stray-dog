#If VBA7 Then '処理を停止するWindows APIのSleep関数を使用できるようにAPIを宣言する、上が64bit版、下が32bit版。
Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal ms As LongPtr)
#Else
Private Declare Sub Sleep Lib "kernel32" (ByVal ms As Long)
#End If

'■InternetExplorerで再度、objIEをSetしなおす。
Sub IE_shell_set_objIE()
  
    Dim i As Integer
    Dim j As Long
    Dim urlname As String
    Dim obj1 As Object
    Dim objnext1 As Object
    Dim objnext2 As Object
    Dim objnext3 As Object
    Dim objnext4 As Object
    Dim objnext5 As Object
    Dim objnext6 As Object
    Dim startTime As Single
    Dim sumtime As Single
    Dim objIE As InternetExplorer
    Dim data_num As Long
    sumtime = 0
    
    '■画面更新オフ(False)にすると速度が改善される
    Application.ScreenUpdating = False
    
    '■開始時間取得
    startTime = Timer
    
    '■範囲の全行数を取得
    data_num = Range("A1").CurrentRegion.Rows.Count

  '■反復
  For j = 1 To data_num
  
    Debug.Print "Row=" & j & "/" & data_num & " " & Cells(j, 2).Value
    Debug.Print " Pending";
      
    '■Excelの3行目に各商品のURLが貼ってあるのを前提として、urlnameに代入
     urlname = Cells(j, 3).Value
     
     '■指定したURLに飛び、Webサイトの表示を待つ
     Call ieView(objIE, urlname, False)
     
    '■念のため時間空ける、繰り返し回数が多いほど早くなるかも？？
    For i = 0 To 60
        DoEvents
    Next i
    
    ' ■nextElementSiblingがNullの場合エラーになる
    On Error Resume Next
    Set obj1 = objIE.document.getElementsByClassName("product_meta")(0)
    Set objnext1 = obj1.nextElementSibling
    Set objnext2 = objnext1.nextElementSibling
    Set objnext3 = objnext2.nextElementSibling
    Set objnext4 = objnext3.nextElementSibling
    Set objnext5 = objnext4.nextElementSibling
    Set objnext6 = objnext5.nextElementSibling
    Cells(j, 4).Value = obj1.getElementsByTagName("a")(0).innerHTML
    Cells(j, 5).Value = objnext1.innerHTML
    Cells(j, 6).Value = objnext2.innerHTML
    Cells(j, 7).Value = objnext3.innerHTML
    Cells(j, 8).Value = objnext4.innerHTML
    Cells(j, 9).Value = objnext5.innerHTML
    Cells(j, 10).Value = objnext6.innerHTML
        
    '■表示されているIEを閉じる
    objIE.Quit
    
    '■再度IEを開く前にメモリを解放
    Set objIE = Nothing
    Set winshell = Nothing
    Set obj1 = Nothing
    Set objnext1 = Nothing
    Set objnext2 = Nothing
    Set objnext3 = Nothing
    Set objnext4 = Nothing
    Set objnext5 = Nothing
    Set objnext6 = Nothing
    Debug.Print " Completed"
    
    '■総処理時間計算
    sumtime = Timer - startTime
 Next j
    
    '■必ず最後に画面更新はオンにする
    Application.ScreenUpdating = True
    MsgBox "処理が完了しました" & Chr(10) & sumtime & "秒"
End Sub


Sub ieView(objIE As InternetExplorer, urlname As String, Optional viewFlg As Boolean = True)

  'IE(InternetExplorer)のオブジェクトを作成する
  'Set objIE = CreateObject("InternetExplorer.Application")
  Set objIE = New InternetExplorerMedium
  'IE(InternetExplorer)を表示・非表示、ここではviewFlgがTrueなので表示、省略したいときはFalseを入れる
  objIE.Visible = viewFlg

  '指定したURLのページを表示する
  objIE.navigate urlname
    Debug.Print ".";
 
 'IEが完全表示されるまで待機
 Call ieCheck(objIE)

End Sub


Sub ieCheck(objIE As InternetExplorer)

  Dim timeout As Date

  '完全にページが表示されるまで待機する、（変数timeOutに処理時間+20秒を加算した時間を代入）
  timeout = Now + TimeSerial(0, 0, 20)
    
    'InternetExplorerオブジェクトの状態をチェック
    'Busy=Trueは読み込み中、ReadyStateプロパティの「4」は読み込み完了状態を表す、
  Do While objIE.Busy = True Or objIE.readyState <> 4
    DoEvents
    Sleep 1 '1 ms待機
    If Now > timeout Then '一定時間経っても読み込まない場合、無限ループを防ぐためRefresh
      objIE.Refresh
      timeout = Now + TimeSerial(0, 0, 20)
    End If
  Loop
    Debug.Print ".";
  timeout = Now + TimeSerial(0, 0, 20)

    'Documentオブジェクトの状態をチェック
  Do While objIE.document.readyState <> "complete" 'completeはdocumentオブジェクトの読み込み完了。
    DoEvents
    Sleep 1
    If Now > timeout Then
      objIE.Refresh
      timeout = Now + TimeSerial(0, 0, 20)
    End If
   Loop
    Debug.Print "."
 '２つのループを抜ければ完全に読み込み完了になる
End Sub
